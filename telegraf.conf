# Telegraf Configuration File

[agent]
  interval = "5s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  omit_hostname = true
  debug = true


# Input Plugin for Drinking Water
[[inputs.http]]
  name_override = "drinking_water"
  urls = ["http://flask_app:5001/drinking_water"]
  data_format = "json"
  method = "GET"

# Input Plugin for Irrigation Water
[[inputs.http]]
  name_override = "irrigation_water"
  urls = ["http://flask_app:5001/irrigation_water"]
  data_format = "json"
  method = "GET"

# Input Plugin for Industrial Water
[[inputs.http]]
  name_override = "industrial_water"
  urls = ["http://flask_app:5001/industrial_water"]
  data_format = "json"
  method = "GET"

# Common Starlark Operations for all water types
[[processors.starlark]]
  namepass = ["drinking_water", "irrigation_water", "industrial_water"]
  source = '''
def fahrenheit_to_celsius(fahrenheit):
    return (fahrenheit - 32) * 5.0 / 9.0

def apply(metric):
    temp_fahr = metric.fields["temperature_fahrenheit"]
    metric.fields["temperature_celsius"] = fahrenheit_to_celsius(temp_fahr)
    return metric
'''


# Starlark Processor for Drinking Water
[[processors.starlark]]
  namepass = ["drinking_water"]
  source = '''
def apply(metric):
    if metric.fields["quality_index"] < 95:
        metric.tags["alert"] = "Quality index below acceptable level for drinking water"
    return metric
'''

# Starlark Processor for Irrigation Water
[[processors.starlark]]
  namepass = ["irrigation_water"]
  source = """
def apply(metric):
    metric.fields['particulate_matter'] -= 10  # Remove 10 mg/L
    return metric
"""

# # Starlark Processor for Industrial Water
[[processors.starlark]]
  namepass = ["industrial_water"]
  source = """
def apply(metric):

    metric.fields['chemical_content'] -= 20  # Neutralize 20 mg/L
    if metric.fields['temperature_celsius'] > 50:  # Use Celsius for comparison
        metric.fields['temperature_celsius'] = 50  # Cap temperature

    if metric.fields['chemical_content'] > 100:  # Condition for alert
        metric.tags['alert'] = 'Chemical content above safe limit for industrial water!'
    
    return metric
"""

# Output Plugin for All Data
[[outputs.file]]
  files = ["/var/log/telegraf/all_water_data.json"]
  data_format = "json"
  [outputs.file.tagdrop]
    alert = ["*"]
  
# Output Plugin for Alerts
[[outputs.file]]
  files = ["/var/log/telegraf/water_quality_alerts.json"]
  namepass = ["drinking_water", "industrial_water"]  # Only include relevant streams for alerts
  data_format = "json"
  [outputs.file.tagpass]
    alert = ["*"]

