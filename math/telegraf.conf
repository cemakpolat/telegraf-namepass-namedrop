# Define global agent configuration
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  omit_hostname = false
  debug = true

# Group 1: Addition - 3 members
[[inputs.http]]
  urls = ["http://flask_app:5001/group1"]
  data_format = "json"
  name_override = "group1_plus"

[[processors.printer]]

# Member 1 of Group 1 - Add 2
[[processors.starlark]]
  namepass = ["group1_plus"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value + 2  # First member adds 2
  return metric
  '''


# Member 2 of Group 1 - Add 4
[[processors.starlark]]
  namepass = ["group1_plus"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value + 4  # Second member adds 4
  return metric
  '''

# Member 3 of Group 1 - Add 6
[[processors.starlark]]
  namepass = ["group1_plus"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value + 6  # Third member adds 6
  return metric
  '''


# Group 2: Subtraction - 3 members
[[inputs.http]]
  urls = ["http://flask_app:5001/group2"]
  data_format = "json"
  name_override = "group2_minus"

# Member 1 of Group 2 - Subtract 2
[[processors.starlark]]
  namepass = ["group2_minus"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value - 2
  return metric
  '''

# Member 2 of Group 2 - Subtract 4
[[processors.starlark]]
  namepass = ["group2_minus"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value - 4
  return metric
  '''

# Member 3 of Group 2 - Subtract 6
[[processors.starlark]]
  namepass = ["group2_minus"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value - 6
  return metric
  '''

# Group 3: Multiplication - 3 members
[[inputs.http]]
  urls = ["http://flask_app:5001/group3"]
  data_format = "json"
  name_override = "group3_multiply"

# Member 1 of Group 3 - Multiply by 2
[[processors.starlark]]
  namepass = ["group3_multiply"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value * 2
  return metric
  '''

# Member 2 of Group 3 - Multiply by 3
[[processors.starlark]]
  namepass = ["group3_multiply"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value * 3
  return metric
  '''

# Member 3 of Group 3 - Multiply by 4
[[processors.starlark]]
  namepass = ["group3_multiply"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value * 4
  return metric
  '''

# Group 4: Division - 3 members
[[inputs.http]]
  urls = ["http://flask_app:5001/group4"]
  data_format = "json"
  name_override = "group4_divide"

# Member 1 of Group 4 - Divide by 2
[[processors.starlark]]
  namepass = ["group4_divide"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value / 2
  return metric
  '''

# Member 2 of Group 4 - Divide by 3
[[processors.starlark]]
  namepass = ["group4_divide"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value / 3
  return metric
  '''

# Member 3 of Group 4 - Divide by 4
[[processors.starlark]]
  namepass = ["group4_divide"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      metric.fields[field] = value / 4
  return metric
  '''

# Final checks for subtraction and division results
[[processors.starlark]]
  namedrop = ["group1_plus", "group3_multiply"]
  source = '''
def apply(metric):
  for field, value in metric.fields.items():
      # Subtraction: Ensure no negative values
      if "minus" in metric.name:
          if value < 0:
              metric.fields[field] = 0
      # Division: Ensure no negative values and rounding
      if "divide" in metric.name:
          metric.fields[field] = int(value)
  return metric
  '''
[[outputs.file]]
  namepass = [ "group2_minus", "group4_divide"]
  files = ["/var/log/telegraf/final_subtraction_division_output.log"]
  data_format = "json"  # Output format as JSON

# Aggregated output for all groups
[[outputs.file]]
  namepass = ["group1_plus", "group2_minus", "group3_multiply", "group4_divide"]
  files = ["/var/log/telegraf/aggregated_output.log"]
  data_format = "json"  # Output format as JSON

