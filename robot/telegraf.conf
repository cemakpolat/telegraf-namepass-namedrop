[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  omit_hostname = true
  debug = true

# Input plugins for each robot
[[inputs.http]]
  name_override = "standard_robot_telemetry"
  urls = ["http://flask_app:5001/robot/robot1"]
  data_format = "json"
  

[[inputs.http]]
  name_override = "delivery_robot_telemetry"
  urls = ["http://flask_app:5001/robot/robot3"]
  data_format = "json"
  

[[inputs.http]]
  name_override = "inspection_robot_telemetry"
  urls = ["http://flask_app:5001/robot/robot5"]
  data_format = "json"
  json_string_fields = ["quality_check"]

# Processors
#[[processors.printer]]

# Battery Level Check for all robots
[[processors.starlark]]
  namepass = ["*_robot_telemetry"]
  source = '''
def apply(metric):
  battery = metric.fields.get("battery_level")
  if battery and battery < 20:
    metric.tags["action"] = "low_battery"
    metric.fields["alert"] = "Robot needs to charge"
  return metric
'''

# Load Status Check for standard and delivery robots
[[processors.starlark]]
  namepass = ["standard_robot_telemetry", "delivery_robot_telemetry"]
  source = '''
def apply(metric):
    load_status = metric.fields["current_load"]
    if load_status and load_status > 90:
        metric.tags["action"] = "overload"
        metric.fields["alert"] = "Robot is overloaded, reduce load"
    return metric
'''
#[[processors.printer]]
# Inspection Robot - Quality Check Status
[[processors.starlark]]
  namepass = ["inspection_robot_telemetry"]
  source = '''
def apply(metric):
    quality = metric.fields["quality_check"]
    if quality and quality == "fail":
        metric.tags["action"] = "quality_alert"
        metric.fields["alert"] = "Product failed quality inspection"
    return metric
'''

# Output plugins

# Log all telemetry data
[[outputs.file]]
  namepass = ["*_robot_telemetry"]
  files = ["/var/log/telegraf/all_robot_data.log"]
  data_format = "json"  # Output format as JSON

# Log only alerts
[[outputs.file]]
  #fieldpass= ["alert"] # alternative to tagpass
  files = ["/var/log/telegraf/robot_alerts.log"] # The order of the files field is important, otherwise it doesnt work.
  data_format = "json"  # Output format as JSON
  [outputs.file.tagpass]
    action = ["overload","quality_alert","low_battery"]
  
  
